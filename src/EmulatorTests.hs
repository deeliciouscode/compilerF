module EmulatorTests where
import DataStructures

--------------------- general --------------------- 

stack :: [a]
stack = []

heap :: [a]
heap = []

i :: Instructions
i = EmptyInstruction 

t :: Int
t = 0

p :: Int
p = 0

------------------------ 1 ------------------------ 

program1 :: [Char]
program1 = "a = 1; main = a;"

code1 :: [Instructions]
code1 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 1),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushfun "a",
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

global1 :: [(String, (Int, Int))]
global1 = [
    ("a",(0,4)),
    ("main",(0,10)),
    ("false",(0,16)),
    ("true",(0,22)),
    ("not",(1,28)),
    ("negate",(1,35)),
    ("|",(2,42)),
    ("&",(2,52)),
    ("+",(2,62)),
    ("-",(2,72)),
    ("*",(2,82)),
    ("/",(2,92)),
    ("==",(2,102)),
    ("<",(2,112)),
    ("if",(3,122))
    ]

------------------------ 2 ------------------------ 

program2 :: [Char]
program2 = "a = 1 + 2; b = 3 * 4; main = if a < 2 then a else a / b;"

code2 :: [Instructions]
code2 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 2),
    Pushval (IntX 1),
    Pushfun "+",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (IntX 4),
    Pushval (IntX 3),
    Pushfun "*",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushfun "b",
    Pushfun "a",
    Pushfun "/",
    Makeapp,
    Makeapp,
    Pushfun "a",
    Pushval (IntX 2),
    Pushfun "a",
    Pushfun "<",
    Makeapp,
    Makeapp,
    Pushfun "if",
    Makeapp,
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

code2' :: [Instructions]
code2' = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 2),
    Pushval (IntX 1),
    Pushfun "+",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (IntX 4),
    Pushval (IntX 3),
    Pushfun "*",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushfun "b",
    Pushfun "a",
    Pushfun "/",
    Makeapp,
    Makeapp,
    Pushfun "a",
    Pushval (IntX 10),
    Pushfun "a",
    Pushfun "<",
    Makeapp,
    Makeapp,
    Pushfun "if",
    Makeapp,
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

global2 :: [(String, (Int, Int))]
global2 = [
    ("negate",(1,63)),
    ("/",(2,120)),
    ("b",(0,14)),
    ("==",(2,130)),
    ("&",(2,80)),
    ("|",(2,70)),
    ("<",(2,140)),
    ("if",(3,150)),
    ("*",(2,110)),
    ("not",(1,56)),
    ("false",(0,44)),
    ("-",(2,100)),
    ("main",(0,24)),
    ("+",(2,90)),
    ("true",(0,50)),
    ("a",(0,4))
    ]

------------------------ 3 ------------------------ 

program3 :: [Char]
program3 = "main = k1 0 1; k1 a b = b;"

code3 :: [Instructions]
code3 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 1),
    Pushval (IntX 0),
    Pushfun "k1",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 2,
    Update 2,
    Slide 3,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

global3 :: [(String, (Int, Int))]
global3 = [
    ("main",(0,4)),
    ("k1",(2,14)),
    ("false",(0,20)),
    ("true",(0,26)),
    ("not",(1,32)),
    ("negate",(1,39)),
    ("|",(2,46)),
    ("&",(2,56)),
    ("+",(2,66)),
    ("-",(2,76)),
    ("*",(2,86)),
    ("/",(2,96)),
    ("==",(2,106)),
    ("<",(2,116)),
    ("if",(3,126))
    ]

------------------------ 3 ------------------------ 

-- FEHLER IN CODE GEN; EMULATOR WORKS

program4 :: [Char]
program4 = "main = f 0 1 2; f a b c = k1 a b; k1 a b = b;"

code4 :: [Instructions]
code4 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 2),
    Pushval (IntX 1),
    Pushval (IntX 0),
    Pushfun "f",
    Makeapp,
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 2,
    Pushparam 2,
    Pushfun "k1",
    Makeapp,
    Makeapp,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return,
    Pushparam 2,
    Update 2,
    Slide 3,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

global4 :: [(String, (Int, Int))]
global4 = [
    ("main",(0,4)),
    ("f",(3,16)),
    ("k1",(2,26)),
    ("false",(0,32)),
    ("true",(0,38)),
    ("not",(1,44)),
    ("negate",(1,51)),
    ("|",(2,58)),
    ("&",(2,68)),
    ("+",(2,78)),
    ("-",(2,88)),
    ("*",(2,98)),
    ("/",(2,108)),
    ("==",(2,118)),
    ("<",(2,128)),
    ("if",(3,138))
    ]

---------------------------------------------

-- FEHLER IN CODE GEN; EMULATOR WORKS

program5 :: [Char]
program5 = "main = k1 0 (k1 1 2); k1 a b = b;"

code5 :: [Instructions]
code5 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 2),
    Pushval (IntX 1),
    Pushfun "k1",
    Makeapp,
    Makeapp,
    Pushval (IntX 0),
    Pushfun "k1",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 2,
    Update 2,
    Slide 3,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

global5 :: [(String, (Int, Int))]
global5 = [
    ("main",(0,4)),
    ("k1",(2,18)),
    ("false",(0,24)),
    ("true",(0,30)),
    ("not",(1,36)),
    ("negate",(1,43)),
    ("|",(2,50)),
    ("&",(2,60)),
    ("+",(2,70)),
    ("-",(2,80)),
    ("*",(2,90)),
    ("/",(2,100)),
    ("==",(2,110)),
    ("<",(2,120)),
    ("if",(3,130))
    ]

---------------------------------------------

-- FEHLER IN CODE GEN; EMULATOR WORKS

program6 :: [Char]
program6 = "main = let a = 1; b = 2; c = a in a + b + c;"

code6 :: [Instructions]
code6 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 1),
    Alloc,
    Makeapp,
    Pushval (IntX 2),
    Alloc,
    Makeapp,
    Pushparam 0,
    Alloc,
    Makeapp,
    Pushparam (-1),
    Pushparam 1,
    Pushfun "+",
    Makeapp,
    Makeapp,
    Pushparam 2,
    Pushfun "+",
    Makeapp,
    Makeapp,
    SlideLet 3,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

global6 :: [(String, (Int, Int))]
global6 = [
    ("main",(0,4)),
    ("false",(0,28)),
    ("true",(0,34)),
    ("not",(1,40)),
    ("negate",(1,47)),
    ("|",(2,54)),
    ("&",(2,64)),
    ("+",(2,74)),
    ("-",(2,84)),
    ("*",(2,94)),
    ("/",(2,104)),
    ("==",(2,114)),
    ("<",(2,124)),
    ("if",(3,134))
    ]
