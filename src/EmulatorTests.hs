------------------------ 1 ------------------------ 
module EmulatorTests where

import DataStructures

program1 :: [Char]
program1 = "a = 1; main = a;"

code1 :: [Instructions]
code1 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 1),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushfun "a",
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

stack1 :: [a]
stack1 = []

global1 :: [(String, (Int, Int))]
global1 = [
    ("a",(0,4)),
    ("main",(0,10)),
    ("false",(0,16)),
    ("true",(0,22)),
    ("not",(1,28)),
    ("negate",(1,35)),
    ("|",(2,42)),
    ("&",(2,52)),
    ("+",(2,62)),
    ("-",(2,72)),
    ("*",(2,82)),
    ("/",(2,92)),
    ("==",(2,102)),
    ("<",(2,112)),
    ("if",(3,122))
    ]

heap1 :: [a]
heap1 = []

i1 :: Instructions
i1 = EmptyInstruction 

t1 :: Int
t1 = 0

p1 :: Int
p1 = 0

------------------------ 2 ------------------------ 

program2 :: [Char]
program2 = "a = 1 + 2; b = 3 * 4; main = if a < 2 then a else a / b;"

code2 :: [Instructions]
code2 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 2),
    Pushval (IntX 1),
    Pushfun "+",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (IntX 4),
    Pushval (IntX 3),
    Pushfun "*",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushfun "b",
    Pushfun "a",
    Pushfun "/",
    Makeapp,
    Makeapp,
    Pushfun "a",
    Pushval (IntX 2),
    Pushfun "a",
    Pushfun "<",
    Makeapp,
    Makeapp,
    Pushfun "if",
    Makeapp,
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

code3 :: [Instructions]
code3 = [
    Reset,
    Pushfun "main",
    Call,
    Halt,
    Pushval (IntX 2),
    Pushval (IntX 1),
    Pushfun "+",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (IntX 4),
    Pushval (IntX 3),
    Pushfun "*",
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushfun "b",
    Pushfun "a",
    Pushfun "/",
    Makeapp,
    Makeapp,
    Pushfun "a",
    Pushval (IntX 10),
    Pushfun "a",
    Pushfun "<",
    Makeapp,
    Makeapp,
    Pushfun "if",
    Makeapp,
    Makeapp,
    Makeapp,
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX False),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushval (BoolX True),
    Update 0,
    Slide 1,
    Unwind,
    Call,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Not,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Operator Negate,
    Update 1,
    Slide 2,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Or,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator And,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Plus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Minus,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Times,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator DividedBy,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator Equals,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Unwind,
    Call,
    Operator LessThan,
    Update 2,
    Slide 3,
    Return,
    Pushparam 1,
    Unwind,
    Call,
    Pushparam 3,
    Pushparam 5,
    Operator If,
    Update 3,
    Slide 4,
    Unwind,
    Call,
    Return
    ]

stack2 :: [a]
stack2 = []

global2 :: [(String, (Int, Int))]
global2 = [
    ("negate",(1,63)),
    ("/",(2,120)),
    ("b",(0,14)),
    ("==",(2,130)),
    ("&",(2,80)),
    ("|",(2,70)),
    ("<",(2,140)),
    ("if",(3,150)),
    ("*",(2,110)),
    ("not",(1,56)),
    ("false",(0,44)),
    ("-",(2,100)),
    ("main",(0,24)),
    ("+",(2,90)),
    ("true",(0,50)),
    ("a",(0,4))
    ]

heap2 :: [a]
heap2 = []

i2 :: Instructions
i2 = EmptyInstruction 

t2 :: Int
t2 = 0

p2 :: Int
p2 = 0
